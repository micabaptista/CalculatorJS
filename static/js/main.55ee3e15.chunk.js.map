{"version":3,"sources":["components/Button.jsx","components/Input.jsx","components/ClearButton.jsx","App.js","reportWebVitals.js","index.js"],"names":["Button","props","className","value","children","isNaN","onClick","handleClick","Input","input","ClearButton","handleClear","App","useState","state","setState","addToInput","val","handleUserKeyPress","useCallback","event","key","keyCode","prevUserText","isValidExpression","math","toString","slice","useEffect","window","addEventListener","removeEventListener","expression","lastChar","substr","length","firstChar","charAt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.55ee3e15.chunk.js","sourcesContent":["import React from \"react\";\nimport './Button.css';\n\nconst isOperator = value => {\n    return !isNaN(value) || value === \".\" || value === \"=\";\n};\n\nexport const Button = props => (\n    <div className={`button-wrapper ${isOperator(props.children) ? null : \"operator\"}`}\n         onClick={() => props.handleClick(props.children)}>\n        {props.children}\n\n    </div>\n);\n\n","import React from \"react\";\nimport \"./Input.css\"\n\nexport const Input = props => (\n    <div className=\"input\">{props.input}</div>\n);","import React from \"react\";\nimport \"./ClearButton.css\";\n\n\n\nexport const ClearButton = props => (\n    <div className=\"clear-btn\" onClick={props.handleClear}>\n        {props.children}\n    </div>\n)","import React, {useState, useEffect, useCallback} from \"react\"\nimport './App.css';\nimport {Button} from \"./components/Button\";\nimport {Input} from \"./components/Input\";\nimport {ClearButton} from \"./components/ClearButton\";\nimport * as math from 'mathjs';\n\nfunction App() {\n    const [state, setState] = useState('');\n\n\n    const addToInput = val => {\n        setState(state + val);\n    }\n\n    const handleEqual = () => {\n        setState(math.evaluate(state));\n    }\n\n    const handleUserKeyPress = useCallback(event => {\n\n        const {key, keyCode} = event;\n        if ((keyCode >= 48 && keyCode <= 57) || (keyCode >= 187 && keyCode < 191)) {\n            setState(prevUserText => `${prevUserText}${key}`);\n        } else if (keyCode === 13) {\n\n            //math.evaluate(`${prevUserText}`)\n            setState(prevUserText => `${isValidExpression(prevUserText) ? math.evaluate(`${prevUserText}`)\n                : prevUserText}`);\n\n        } else if (keyCode === 8) {\n            setState(prevUserText => prevUserText.toString().slice(0, -1))\n        }else if (keyCode === 67) {\n            setState('')\n        }\n    }, []);\n\n    useEffect(() => {\n\n        window.addEventListener('keydown', handleUserKeyPress);\n\n        return () => {\n            window.removeEventListener('keydown', handleUserKeyPress);\n        };\n\n    }, [handleUserKeyPress]);\n\n    const isValidExpression = expression => {\n        const lastChar = expression.substr(expression.length - 1);\n        const firstChar = expression.charAt(0);\n        return !isNaN(lastChar) && !isNaN(firstChar);\n\n    }\n\n\n\n\n    return (\n        <div className=\"app\">\n            <div className=\"calc-wrapper\">\n                <Input input={state}/>\n\n                <div className=\"row\">\n                    <Button handleClick={addToInput}>7</Button>\n                    <Button handleClick={addToInput}>8</Button>\n                    <Button handleClick={addToInput}>9</Button>\n                    <Button handleClick={addToInput}>/</Button>\n                </div>\n                <div className=\"row\">\n                    <Button handleClick={addToInput}>4</Button>\n                    <Button handleClick={addToInput}>5</Button>\n                    <Button handleClick={addToInput}>6</Button>\n                    <Button handleClick={addToInput}>*</Button>\n                </div>\n                <div className=\"row\">\n                    <Button handleClick={addToInput}>1</Button>\n                    <Button handleClick={addToInput}>2</Button>\n                    <Button handleClick={addToInput}>3</Button>\n                    <Button handleClick={addToInput}>+</Button>\n                </div>\n                <div className=\"row\">\n                    <Button handleClick={addToInput}>.</Button>\n                    <Button handleClick={addToInput}>0</Button>\n                    <Button handleClick={() => handleEqual()}>=</Button>\n                    <Button handleClick={addToInput}>-</Button>\n                </div>\n                <div className=\"row\">\n                    <ClearButton handleClear={() => setState('')}>\n                        Clear\n                    </ClearButton>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}